// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Possible Enums:
// - Role
// - Dice
// - SourceType
// - Size

enum Role {
  ADMIN
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  name      String?
  role      Role     @default(USER)
  password  String
  apiKeys   ApiKey[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  name      String
  key       String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Source {
  id           Int        @id @default(autoincrement())
  name         String
  abbreviation String?
  type         String
  system       System     @relation(fields: [systemId], references: [id])
  systemId     Int
  classes      Class[]
  subclasses   SubClass[]
  races        Race[]
  subRaces     SubRace[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model System {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  desc          String?
  sources       Source[]
  abilityScores AbilityScore[]
  skills        Skill[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model AbilityScore {
  id        Int      @id @default(autoincrement())
  name      String
  full_name String
  desc      String?
  skills    Skill[]
  system    System   @relation(fields: [systemId], references: [id])
  systemId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, systemId])
  @@unique([name, systemId])
}

model Skill {
  id        Int          @id @default(autoincrement())
  name      String
  desc      String?
  ability   AbilityScore @relation(fields: [abilityId, systemId], references: [id, systemId])
  abilityId Int
  system    System       @relation(fields: [systemId], references: [id])
  systemId  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([name, systemId])
}

model Class {
  id         Int        @id @default(autoincrement())
  name       String
  desc       String?
  hitDie     Int
  subclasses SubClass[]
  source     Source     @relation(fields: [sourceId], references: [id])
  sourceId   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model SubClass {
  id        Int      @id @default(autoincrement())
  name      String
  desc      String?
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int
  source    Source   @relation(fields: [sourceId], references: [id])
  sourceId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Race {
  id        Int       @id @default(autoincrement())
  name      String
  speed     Int
  size      String
  subRaces  SubRace[]
  source    Source    @relation(fields: [sourceId], references: [id])
  sourceId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SubRace {
  id        Int      @id @default(autoincrement())
  name      String
  race      Race     @relation(fields: [raceId], references: [id])
  raceId    Int
  source    Source   @relation(fields: [sourceId], references: [id])
  sourceId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Spell {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Monster {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trait {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
